#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *next;
};
struct node *head;
void insert_at_the_begining(int x)
{
    struct node *temp;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->data=x;
    temp->next=head;
    head=temp;
}
void insert_at_middle(int index,int value)
{
    struct node *ptr=head;
    for(int i=0;i<index;i++)
    {
        ptr=ptr->next;
    }
    struct node *temp;
    temp=malloc(sizeof(struct node));
    temp->data=value;
    temp->next=ptr->next;
    ptr->next=temp;
}
void insert_at_end(int value) {
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    temp->data = value;
    temp->next = NULL;

    if (head == NULL) {
        head = temp;
        return;
    }

    struct node *ptr = head;
    while (ptr->next != NULL) {
        ptr = ptr->next;
    }
    ptr->next = temp;
}
void print() {
    struct node *ptr = head;
    while (ptr != NULL) {
        printf("%d ", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}
int main()
{
    int ch;
    while(1)
   { int data,index;
    printf("Enter choice\n");
    printf("1.Insert at the begginig\n");
    printf("2.Insert at th middle\n");
    printf("3.Insert at the end\n");
    scanf("%d",&ch);
       switch(ch)
    {
    case 1:
    printf("Enter Data");
    scanf("%d",&data);
    insert_at_the_begining(data);
    print();
    break;
    case 2:
    printf("Enter Data");
    scanf("%d",&data);
    printf("Enter Index");
    scanf("%d",&index);
    insert_at_middle(index,data);
    print();
    break;
    case 3:
    printf("Enter Data");
    scanf("%d",&data);
    insert_at_end(data);
    print();
    break;
    default:
    exit(1);
    }
    
    
}
}

